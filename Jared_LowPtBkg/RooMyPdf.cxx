/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooMyPdf.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(RooMyPdf) 

 RooMyPdf::RooMyPdf(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _a1,
                        RooAbsReal& _a2,
                        RooAbsReal& _a3,
                        RooAbsReal& _a4,
                        RooAbsReal& _a5) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   a1("a1","a1",this,_a1),
   a2("a2","a2",this,_a2),
   a3("a3","a3",this,_a3),
   a4("a4","a4",this,_a4),
   a5("a5","a5",this,_a5)
 { 
 } 


 RooMyPdf::RooMyPdf(const RooMyPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   a1("a1",this,other.a1),
   a2("a2",this,other.a2),
   a3("a3",this,other.a3),
   a4("a4",this,other.a4),
   a5("a5",this,other.a5)
 { 
 } 



 Double_t RooMyPdf::evaluate() const 
 { 
	// ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE
	
	//Fix all parameters except norms
	/*Double_t ratio1 = 0.246361;
	Double_t muErf1 = 8.68177;
	Double_t sigma1 = 0.260365;
	Double_t muExp1 = 8;
	Double_t lambdaExp1 = 1.57003;
	Double_t lambdaDecay1 = 3.42257;
	Double_t ratio2 = 0.469979;
	Double_t muErf2 = 9.33062;
	Double_t sigma2 = 0.586417;
	Double_t muExp2 = 7.95747;
	Double_t lambdaExp2 = 2.47556;
	Double_t lambdaDecay2 = 3.44403;
	Double_t ratio3 = 1.16533;
	Double_t muErf3 = 9.93725;
	Double_t sigma3 = 0.877941;
	Double_t muExp3 = 7.68777;
	Double_t lambdaExp3 = 1.77457;
	Double_t lambdaDecay3 = 3.69275;
	Double_t ratio4 = 3.3301;
	Double_t muErf4 = 10;
	Double_t sigma4 = 1.17265;
	Double_t muExp4 = 7.40884;
	Double_t lambdaExp4 = 0.598727;
	Double_t lambdaDecay4 = 4.0446;
	Double_t ratio5 = 2.09825;
	Double_t muErf5 = 10;
	Double_t sigma5 = 1.48736;
	Double_t muExp5 = 6.91645;
	Double_t lambdaExp5 = 0.909955;
	Double_t lambdaDecay5 = 4.39846;*/
	//PARAMETERS FROM FITTING FULL DATASET
	Double_t ratio1 = 0.268959;
	Double_t muErf1 = 8.67319;
	Double_t sigma1 = 0.258238;
	Double_t muExp1 = 8;
	Double_t lambdaExp1 = 1.42243;
	Double_t lambdaDecay1 = 3.28968;
	Double_t ratio2 = 0.754894;
	Double_t muErf2 = 9.32947;
	Double_t sigma2 = 0.59309;
	Double_t muExp2 = 7.96227;
	Double_t lambdaExp2 = 1.60989;
	Double_t lambdaDecay2 = 3.43522;
	Double_t ratio3 = 0.564135;
	Double_t muErf3 = 9.9075;
	Double_t sigma3 = 0.86636;
	Double_t muExp3 = 7.66983;
	Double_t lambdaExp3 = 3.72621;
	Double_t lambdaDecay3 = 3.28048;
	Double_t ratio4 = 3.57425;
	Double_t muErf4 = 10;
	Double_t sigma4 = 1.18591;
	Double_t muExp4 = 7.48582;
	Double_t lambdaExp4 = 0.457465;
	Double_t lambdaDecay4 = 3.80169;
	Double_t ratio5 = 1.32556;
	Double_t muErf5 = 10;
	Double_t sigma5 = 1.48539;
	Double_t muExp5 = 6.81494;
	Double_t lambdaExp5 = 1.65293;
	Double_t lambdaDecay5 = 4.17115;


	//Calculate
	Double_t erfpart, exppart, decay;
	
	erfpart = (TMath::Erf((x-muErf1)/(TMath::Sqrt(2)*sigma1))+1);
	exppart = 0;
	if (x > muExp1)
		exppart = 1-TMath::Exp(-(x-muExp1)/lambdaExp1);
	decay = TMath::Exp(-x/lambdaDecay1);
	Double_t part1 = a1*(ratio1*erfpart + exppart)*decay;
	
	erfpart = (TMath::Erf((x-muErf2)/(TMath::Sqrt(2)*sigma2))+1);
	exppart = 0;
	if (x > muExp2)
		exppart = 1-TMath::Exp(-(x-muExp2)/lambdaExp2);
	decay = TMath::Exp(-x/lambdaDecay2);
	Double_t part2 = a2*(ratio2*erfpart + exppart)*decay;
	
	erfpart = (TMath::Erf((x-muErf3)/(TMath::Sqrt(2)*sigma3))+1);
	exppart = 0;
	if (x > muExp3)
		exppart = 1-TMath::Exp(-(x-muExp3)/lambdaExp3);
	decay = TMath::Exp(-x/lambdaDecay3);
	Double_t part3 = a3*(ratio3*erfpart + exppart)*decay;
	
	erfpart = (TMath::Erf((x-muErf4)/(TMath::Sqrt(2)*sigma4))+1);
	exppart = 0;
	if (x > muExp4)
		exppart = 1-TMath::Exp(-(x-muExp4)/lambdaExp4);
	decay = TMath::Exp(-x/lambdaDecay4);
	Double_t part4 = a4*(ratio4*erfpart + exppart)*decay;
	
	erfpart = (TMath::Erf((x-muErf5)/(TMath::Sqrt(2)*sigma5))+1);
	exppart = 0;
	if (x > muExp5)
		exppart = 1-TMath::Exp(-(x-muExp5)/lambdaExp5);
	decay = TMath::Exp(-x/lambdaDecay5);
	Double_t part5 = a5*(ratio5*erfpart + exppart)*decay;
		
	return part1 + part2 + part3 + part4 + part5;
 } 



